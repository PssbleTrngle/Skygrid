buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'com.modrinth.minotaur'

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply from: 'https://raw.githubusercontent.com/thedarkcolour/KotlinForForge/site/thedarkcolour/kotlinforforge/gradle/kff-3.1.0.gradle'

archivesBaseName = "${mod_id}-forge"

mixin {
    add sourceSets.main, "${mod_id}.mixins.refmap.json"
    config "${mod_id}.forge.mixins.json"
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            arg "-mixin.config=${mod_id}.forge.mixins.json"
            property 'forge.logging.console.level', 'debug'
            taskName 'Client'
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.forge.${project.name}.main"
            arg "-mixin.config=${mod_id}.mixins.json"
            property 'forge.logging.console.level', 'debug'
            taskName 'Server'
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.forge.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', project(":Common").file('src/generated/resources/'), '--existing', file('src/main/resources/')
            property 'forge.logging.console.level', 'debug'
            taskName 'Data'
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir project(":Common").file('src/generated/resources/')

repositories {
    maven { // for AutoRegLib
        name "blamejared"
        url "https://maven.blamejared.com/"
    }
    maven { // for JEI
        name "progwml6"
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        url "https://cursemaven.com"
        content { includeGroup "curse.maven" }
    }
    maven {
        name = "C4"
        url = "https://maven.theillusivec4.top/"
    }
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":Common")
    annotationProcessor 'org.spongepowered:mixin:0.8.4-SNAPSHOT:processor'

    library "io.github.pdvrieze.xmlutil:core:0.84.0"
    library "io.github.pdvrieze.xmlutil:serialization:0.84.0"

    compileOnly fg.deobf("mezz.jei:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:${jei_version}")

    //runtimeOnly fg.deobf("vazkii.autoreglib:AutoRegLib:${arl_version}")
    //compileOnly fg.deobf("vazkii.autoreglib:AutoRegLib:${arl_version}")

    //implementation fg.deobf("com.github.glitchfiend:TerraBlender-forge:${minecraft_version}-${terrablender_version}")
    //implementation fg.deobf("curse.maven:quark-243121:${quark_version}")
    //implementation fg.deobf("curse.maven:bop-220318:${bop_version}")

    //implementation fg.deobf("vazkii.patchouli:Patchouli:${minecraft_version}-${patchouli_version}")
    //compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${minecraft_version}-${curios_version}:api")
    //runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${minecraft_version}-${curios_version}")

    //compileOnly fg.deobf("vazkii.botania:Botania:${minecraft_version}-${botania_version}:api")
    //runtimeOnly fg.deobf("vazkii.botania:Botania:${minecraft_version}-${botania_version}")

}

processResources {
    from project(":Common").sourceSets.main.resources
}



import java.util.stream.Collectors

jar {
    ArrayList<File> collected = configurations.library.collect { it }
    from collected.stream()
            .filter { it.name.contains('xmlutil') }
            .map { it.isDirectory() ? it : zipTree(it) }
            .collect(Collectors.toList())
    duplicatesStrategy = 'exclude'
}

def ENV = System.getenv()
if (ENV.CURSEFORGE_TOKEN) curseforge {
    apiKey = ENV.CURSEFORGE_TOKEN
    project {
        id = curseforge_project_id
        addGameVersion minecraft_version
        addGameVersion 'Forge'

        mainArtifact jar.archiveFile

        releaseType = release_type
        changelog = ENV.CHANGELOG
        changelogType = 'markdown'

        relations {
            requiredDependency 'kotlin-for-forge'
            requiredDependency 'shutup-experimental-settings'
            optionalDependency 'quark'
            optionalDependency 'biomes-o-plenty'
        }
    }
}

if (ENV.MODRINTH_TOKEN) modrinth {
    projectId = modrinth_project_id

    versionNumber = "forge-${version}"
    versionType = release_type
    uploadFile = jar.archiveFile
    changelog = ENV.CHANGELOG

    gameVersions = [minecraft_version]
    loaders = ["forge"]

    dependencies {
        required.project "ordsPcFz"
    }


    syncBodyFrom = rootProject.file("README.md").text
}

tasks.modrinth.dependsOn(tasks.modrinthSyncBody)
rootProject.tasks.curseforge.dependsOn tasks.curseforge
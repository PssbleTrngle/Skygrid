plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'idea'
}

apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'com.modrinth.minotaur'

archivesBaseName = "${mod_id}-fabric"

sourceSets.main.resources.srcDir project(":Common").file('src/generated/resources/')

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":Common")

    library "io.github.pdvrieze.xmlutil:core:0.84.0"
    library "io.github.pdvrieze.xmlutil:serialization:0.84.0"

    // compile against the JEI API but do not include it at runtime
    modCompileOnlyApi "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    modCompileOnlyApi "mezz.jei:jei-${minecraft_version}-fabric-api:${jei_version}"
    // at runtime, use the full JEI jar
    modRuntimeOnly "mezz.jei:jei-${minecraft_version}-common:${jei_version}"
    modRuntimeOnly "mezz.jei:jei-${minecraft_version}-fabric:${jei_version}"

    modImplementation group: "net.fabricmc", name: "fabric-language-kotlin", version: "1.8.0+kotlin.1.7.0"
}

loom {
    accessWidenerPath = project.file("src/main/resources/${mod_id}.accesswidener")
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}


processResources {
    from project(":Common").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

jar {
    archiveClassifier.set 'dev'
    from("LICENSE") {
        rename { "${it}_${mod_name}" }
    }
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set null
}

def ENV = System.getenv()
if (ENV.CURSEFORGE_TOKEN) curseforge {
    apiKey = ENV.CURSEFORGE_TOKEN
    project {
        id = curseforge_project_id
        addGameVersion minecraft_version
        addGameVersion 'Fabric'

        mainArtifact remapJar.archiveFile

        releaseType = release_type
        changelog = ENV.CHANGELOG
        changelogType = 'markdown'

        relations {
            requiredDependency 'fabric-api'
            requiredDependency 'fabric-language-kotlin'
            requiredDependency 'fabric-disable-custom-worlds-advice'
        }
    }
}

if (ENV.MODRINTH_TOKEN) modrinth {
    projectId = modrinth_project_id

    versionNumber = "fabric-${version}"
    versionType = release_type
    uploadFile = remapJar.archiveFile
    changelog = ENV.CHANGELOG

    gameVersions = [minecraft_version]
    loaders = ["fabric"]

    dependencies {
        required.project "P7dR8mSH"
        required.project "Ha28R6CL"
    }
}

rootProject.tasks.curseforge.dependsOn tasks.curseforge

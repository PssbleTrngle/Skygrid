plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
    id 'idea'
}

apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'com.modrinth.minotaur'

archivesBaseName = "${mod_id}-fabric"

sourceSets.main.resources.srcDir project(":Common").file('src/generated/resources/')

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":Common")

    library "io.github.pdvrieze.xmlutil:core:0.84.0"
    library "io.github.pdvrieze.xmlutil:serialization:0.84.0"

    modImplementation group: "net.fabricmc", name: "fabric-language-kotlin", version: "1.7.1+kotlin.1.6.10"
}

loom {
    accessWidenerPath = project.file("src/main/resources/${mod_id}.accesswidener")
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}


processResources {
    from project(":Common").sourceSets.main.resources
    inputs.property "version", rootProject.mod_version

    filesMatching("fabric.mod.json") {
        expand "version": rootProject.mod_version
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

jar {
    archiveClassifier.set 'dev'
    from("LICENSE") {
        rename { "${it}_${mod_name}" }
    }
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set null
}

def ENV = System.getenv()
if (ENV.CURSEFORGE_TOKEN) curseforge {
    apiKey = ENV.CURSEFORGE_TOKEN
    project {
        id = rootProject.curseforge_project_id
        addGameVersion minecraft_version
        addGameVersion 'Fabric'

        mainArtifact(remapJar) {
            displayName = "Fabric ${rootProject.mod_version} (${rootProject.minecraft_version})"
        }

        releaseType = release_type
        changelog = ENV.CHANGELOG
        changelogType = 'markdown'

        relations {
            requiredDependency 'fabric-api'
            requiredDependency 'fabric-language-kotlin'
            requiredDependency 'fabric-disable-custom-worlds-advice'
        }
    }
}

if (ENV.MODRINTH_TOKEN) modrinth {
    token =  ENV.MODRINTH_TOKEN
    projectId = rootProject.modrinth_project_id

    versionNumber = "fabric-${rootProject.mod_version}"
    versionName = "Fabric ${rootProject.mod_version} (${rootProject.minecraft_version})"
    versionType = release_type
    uploadFile = remapJar.archiveFile
    changelog = ENV.CHANGELOG

    gameVersions = [minecraft_version]
    loaders = ["fabric"]

    dependencies {
        required.project "P7dR8mSH"
        required.project "Ha28R6CL"
    }
}

rootProject.tasks.curseforge.dependsOn tasks.curseforge

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = rootProject.group
            artifactId = "${rootProject.mod_id}-fabric"
            version = rootProject.mod_version
            artifact remapJar
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/pssbletrngle/${project.mod_id}")
            credentials {
                username = ENV.GITHUB_ACTOR
                password = ENV.GITHUB_TOKEN
            }
        }
    }
}